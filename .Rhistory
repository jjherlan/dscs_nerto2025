# Choose sample sizes and prepare obs. data array y
set.seed(1) # So we get all the same data
M <- 100 # number of sites
J <- 3 # number of presence/absence measurements
y <- matrix(NA, nrow = M, ncol = J) # to contain the obs. data
vegHt <- sort(runif(M, -1, 1)) # sort for graphical convenience
beta0 <- 0 # logit-scale intercept
beta1 <- 3 # logit-scale slope for vegHt
psi <- plogis(beta0 + beta1 * vegHt) # occupancy probability
z <- rbinom(n = M, size = 1, prob = psi) # occupancy state (true presence/absence)
table(z)
par(mfrow = c(1, 3), mar = c(5, 5, 2, 2), cex.axis = 1.5, cex.lab = 1.5)
plot(vegHt, z, xlab = "Vegetation Height", ylab = "True presence/absence (z)", frame = F,
main = "True Occupancy State", pch = 19, cex = 1.5, col = ifelse(z == 1, "blue", "red"))
plot(function (x) plogis(beta0 + beta1*x), -1, 1, add = T, lwd = 3, col = "red")
wind <- array(runif(M*J, -1, 1), dim = c(M, J)) # random wind covariate
alpha0 <- -2 # logit-scale intercept
alpha1 <- -3 # logit-scale slope for wind
p <- plogis(alpha0 + alpha1*wind) # detection probability
for (j in 1:j) {
y[,j] <- rbinom(M, z, p[,j]) # detection state (presence/absence)
}
sum(apply(y, 1, max)) # observed number of occupied sites with at least one detection)
for (j in 1:J) {
y[,j] <- rbinom(M, z, p[,j]) # detection state (presence/absence)
}
sum(apply(y, 1, max)) # observed number of occupied sites with at least one detection)
library(unmarked)
umf <- unmarkedFrameOccu(y = y, # Pres/Abs meausrements
siteCovs = data.frame(vegHt = vegHt, hab = hab), # site-specific covariates
obsCovs = list(wind = wind, time = time)) # obs-specific covariates
library(unmarked)
umf <- unmarkedFrameOccu(y = y, # Pres/Abs meausrements
siteCovs = data.frame(vegHt = vegHt, hab = hab), # site-specific covariates
obsCovs = list(wind = wind, time = time)) # obs-specific covariates
# Create factors
time <- matrix(rep(as.character(1:J), M), ncol = J, byrow = T) # time factor
hab <- c(rep("A", 33), rep("B", 33), rep("C", 34)) # Must have M = 100
library(unmarked)
umf <- unmarkedFrameOccu(y = y, # Pres/Abs meausrements
siteCovs = data.frame(vegHt = vegHt, hab = hab), # site-specific covariates
obsCovs = list(wind = wind, time = time)) # obs-specific covariates
summary(umf) # Summarize the data
summary(fm1.occ <- occu(~ wind ~ vegHt, data = umf)) # Fit the model
newdat <- data.frame(wind=seq(-1, 1, 0.5))
newdat <- data.frame(vegHt = seq(-1, 1, 0.01))
pred.occ <- predict (fm1.occ, type = "state", newdata = newdat)
newdat <- data.frame(wind = seq(-1, 1, 0, 1))
pred.det <- predict(fm1.occ, type = "det", newdata = newdat)
umf <- unmarkedFrameOccu(y = y, # Pres/Abs meausrements
siteCovs = data.frame(vegHt = vegHt, hab = hab), # site-specific covariates
obsCovs = list(wind = wind, time = time)) # obs-specific covariates
summary(umf) # Summarize the data
summary(fm1.occ <- occu(~ wind ~ vegHt, data = umf)) # Fit the model
newdat <- data.frame(vegHt = seq(-1, 1, 0.01))
pred.occ <- predict (fm1.occ, type = "state", newdata = newdat)
newdat <- data.frame(wind = seq(-1, 1, 0, 1))
newdat <- data.frame(wind = seq(-1, 1, 0.1))
pred.det <- predict(fm1.occ, type = "det", newdata = newdat)
newdat <- data.frame(vegHt = seq(-1, 1, 0.01))
pred.occ <- predict (fm1.occ, type = "state", newdata = newdat)
newdat <- data.frame(wind = seq(-1, 1, 0.1))
pred.det <- predict(fm1.occ, type = "det", newdata = newdat)
newdat <- data.frame(vegHt = c(0.2, 2.1))
predict(fm1.occ, type = "state", newdata = newdat, append = T)
newdat <- data.frame(wind=seq(-1, 1, 0.5))
predict(fml1.occ, type="det", newdata = newdat, append = T)
newdat <- data.frame(wind=seq(-1, 1, 0.5))
predict(fm1.occ, type ="det", newdata = newdat, append = T)
summary(fm.glm <- glm(apply(y, 1, max) ~ vegHt, family = binomial))
plot(vegHt, apply(y, 1, max), xlab = "Vegetation height",
ylab = "Observed occurrence ('ever observed?;)", frame = F, cex = 1.5)
plot(function(x) plogis(beta0 + beta*x), -1, 1, add = T, lwd = 3, col = "red")
summary(fm.glm <- glm(apply(y, 1, max) ~ vegHt, family = binomial))
plot(vegHt, apply(y, 1, max), xlab = "Vegetation height",
ylab = "Observed occurrence ('ever observed?;)", frame = F, cex = 1.5)
summary(fm.glm <- glm(apply(y, 1, max) ~ vegHt, family = binomial))
plot(vegHt, apply(y, 1, max), xlab = "Vegetation height",
ylab = "Observed occurrence ('ever observed?;)", frame = F, cex = 1.5)
plot(function(x) plogis(beta0 + beta*x), -1, 1, add = T, lwd = 3, col = "red")
summary(fm.glm <- glm(apply(y, 1, max) ~ vegHt, family = binomial))
plot(vegHt, apply(y, 1, max), xlab = "Vegetation height",
ylab = "Observed occurrence ('ever observed?;)", frame = F, cex = 1.5)
plot(function(x) plogis(beta0 + bet1a*x), -1, 1, add = T, lwd = 3, col = "red")
lines(vegHt, predict(fm.glm,,"reponse"), type = "l", lwd = 3)
lines(vegHt, predict(fm1.occ, type = "state")[,1],col="blue", lwd = 3)
legend(-1, 0.9, c("Truth", "'LR' with p", "LR without p"), col = c("red", "blue", "black"), lty = 1, lwd = 3, cex = 1.2)
summary(fm.glm <- glm(apply(y, 1, max) ~ vegHt, family = binomial))
plot(vegHt, apply(y, 1, max), xlab = "Vegetation height",
ylab = "Observed occurrence ('ever observed?;)", frame = F, cex = 1.5)
plot(function(x) plogis(beta0 + bet1a*x), -1, 1, add = T, lwd = 3, col = "red")
plot(function(x) plogis(beta0 + beta1*x), -1, 1, add = T, lwd = 3, col = "red")
lines(vegHt, predict(fm.glm,,"reponse"), type = "l", lwd = 3)
summary(fm.glm <- glm(apply(y, 1, max) ~ vegHt, family = binomial))
plot(vegHt, apply(y, 1, max), xlab = "Vegetation height",
ylab = "Observed occurrence ('ever observed?;)", frame = F, cex = 1.5)
plot(function(x) plogis(beta0 + beta1*x), -1, 1, add = T, lwd = 3, col = "red")
lines(vegHt, predict(fm.glm,,"response"), type = "l", lwd = 3)
lines(vegHt, predict(fm1.occ, type = "state")[,1], col="blue", lwd = 3)
legend(-1, 0.9, c("Truth", "'LR' with p", "LR without p"), col = c("red", "blue", "black"), lty = 1, lwd = 3, cex = 1.2)
ranef(fml.occ)
ranef(fm1.occ)
(psi1 <- predict(fm1.occ, type="state")[1,1])
(p1 <- predict(fm1.occ, type="det")[c(1:3),1])
(z1 <- (psi1*prod(1 - p1)) / ((1 - psi1) + psi1*prod(1 - p1)))
fs.fn <- function(fm){
Nocc <- sum(raneff(fm)@post[,2,])
psi.fs <- Nocc / nrow(fm@data@y)
out <- c(Nocc = Nocc, psi.fs = psi.fs)
return(out)
}
pb.fs <- parboot <- parboot(fm1.occ, s.fn, nsim = 10000, report = 2) # Takes a while (33 min)
fs.hat <- fs.fn(fm1.occ) # Point estimate
fs.fn <- function(fm){
Nocc <- sum(raneff(fm)@post[,2,])
psi.fs <- Nocc / nrow(fm@data@y)
out <- c(Nocc = Nocc, psi.fs = psi.fs)
return(out)
}
fs.hat <- fs.fn(fm1.occ) # Point estimate
fs.fn <- function(fm){
Nocc <- sum(ranef(fm)@post[,2,])
psi.fs <- Nocc / nrow(fm@data@y)
out <- c(Nocc = Nocc, psi.fs = psi.fs)
return(out)
}
fs.hat <- fs.fn(fm1.occ) # Point estimate
pb.fs <- parboot <- parboot(fm1.occ, fs.fn, nsim = 10000, report = 2) # Takes a while (33 min)
system.time(pb.fs <- parboot(fm.occ1, fs.fn, nsim = 100, report = 10)) #quicker
system.time(pb.fs <- parboot(fm.occ1, fs.fn, nsim=100, report=10)) # quicker
# Bootstrap the function
fs.hat <- fs.fn(fm1.occ)           # Point estimate
pb.fs <- parboot(fm1.occ, fs.fn, nsim=10000, report=2) # Takes a while (33 min)
system.time(pb.fs <- parboot(fm1.occ, fs.fn, nsim=100, report=10)) # quicker
# Summarize bootstrap distributions
summary(pb.fs@t.star)
